{"version":3,"sources":["fsulogo.png","components/MapCom.js","components/Main.js","components/Notes.js","components/Information.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MapCom","state","center","lat","lng","zoom","showCurrentLocation","navigator","geolocation","getCurrentPosition","position","_this","setState","coords","latitude","longitude","error","handleClick","e","marker","map","leafletMap","leafletElement","L","Control","Geocoder","nominatim","reverse","latlng","options","crs","scale","getZoom","results","r","openPopup","bindPopup","name","addTo","props","mapFun","this","_this2","react_default","a","createElement","Map","onClick","ref","m","TileLayer","url","attribution","React","Component","Main","_isMounted","year","country","countries","countryState","countryStates","city","cities","errorMessage","handleChange","event","isCheckbox","target","type","Object","defineProperty","checked","value","getCountryStateList","validate","document","getElementById","handleSubmit","preventDefault","handler","clickEvent","properties","address","getCountryStateCityList","fetch","response","json","data","theList","getCountryCityList","Badge","color","pill","Form","onSubmit","Button","outline","id","style","marginBottom","UncontrolledCollapse","toggler","Card","CardBody","Alert","FormGroup","Col","xs","sm","md","lg","Label","for","Input","onChange","placeholder","Row","span","offset","xl","key","fontSize","components_MapCom","dialogStyles","width","maxWidth","margin","left","top","transform","zIndex","backgroundColor","padding","borderRadius","display","flexDirection","dialogCloseButtonStyles","cursor","border","height","fontWeight","alignSelf","Notes","notes","onClose","align","children","isOpen","Information","listOfData","businessesClosed","banksClosed","religiousHoliday","religion","dis","holidayNote","handleClickNotes","item","Table","responsive","striped","holiday","i","concat","startDate","undefined","endDate","bind","Notes_Notes","App","visible","val","valYear","valCountry","valCountryState","valCity","className","src","logo","alt","Main_Main","Information_Information","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cb163ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fsulogo.6225300c.png\";","import React from \"react\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"../App.css\";\r\nclass MapCom extends React.Component {\r\n  state = {\r\n    center: {\r\n      lat: 50,\r\n      lng: 100\r\n    },\r\n    zoom: 5\r\n  };\r\n\r\n  showCurrentLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      position => {\r\n        this.setState({\r\n          center: [position.coords.latitude, position.coords.longitude]\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          error: \"Error Getting Current Position!\"\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.showCurrentLocation();\r\n  }\r\n\r\n  handleClick = (e: Object) => {\r\n    const map = this.leafletMap.leafletElement;\r\n    const geocoder = L.Control.Geocoder.nominatim();\r\n    let marker;\r\n    geocoder.reverse(\r\n      e.latlng,\r\n      map.options.crs.scale(map.getZoom()),\r\n      results => {\r\n        var r = results[0];\r\n        if (r) {\r\n          if (marker) {\r\n            marker.openPopup();\r\n          } else {\r\n            marker = L.marker(r.center)\r\n              .bindPopup(r.name)\r\n              .addTo(map)\r\n              .openPopup();\r\n            this.props.mapFun(r);\r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Map\r\n        // center={[30.4418778, -84.3006776]}\r\n        // zoom={15}\r\n        center={this.state.center}\r\n        zoom={this.state.zoom}\r\n        onClick={this.handleClick}\r\n        ref={m => {\r\n          this.leafletMap = m;\r\n        }}\r\n      >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n      </Map>\r\n    );\r\n  }\r\n}\r\nexport default MapCom;\r\n","import React from \"react\";\r\nimport MapCom from \"./MapCom\";\r\nimport {\r\n  Button,\r\n  Alert,\r\n  Badge,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Col,\r\n  Row,\r\n  Label,\r\n  UncontrolledCollapse,\r\n  CardBody,\r\n  Card\r\n} from \"reactstrap\";\r\n\r\nexport default class Main extends React.Component {\r\n  _isMounted = false;\r\n\r\n  state = {\r\n    year: \"2020\",\r\n    country: \"\",\r\n    countries: [],\r\n    countryState: \"\",\r\n    countryStates: [],\r\n    city: \"\",\r\n    cities: [],\r\n    errorMessage: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n\r\n    const url =\r\n      // \"https://cors-anywhere.herokuapp.com/http://www.worldholidaysandevents.com/HolidaysRESTJSON/webresources/holidaysandevents/countries\";\r\n      \"https://cors-anywhere.herokuapp.com/http://54.241.167.36/HolidaysRESTJSON/webresources/holidaysandevents/countries\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (this._isMounted) {\r\n      this.setState({ countries: data.theList });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  async getCountryStateList() {\r\n    const url =\r\n      // \"https://cors-anywhere.herokuapp.com/http://www.worldholidaysandevents.com/HolidaysRESTJSON/webresources/holidaysandevents/countryStates/\" +\r\n      \"https://cors-anywhere.herokuapp.com/http://54.241.167.36/HolidaysRESTJSON/webresources/holidaysandevents/countryStates/\" +\r\n      this.state.country;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (this._isMounted) {\r\n      this.setState({ countryStates: data.theList }, () => {\r\n        if (!this.state.countryState) {\r\n          this.getCountryCityList();\r\n        } else {\r\n          this.getCountryStateCityList();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  async getCountryCityList() {\r\n    const url =\r\n      // \"https://cors-anywhere.herokuapp.com/http://www.worldholidaysandevents.com/HolidaysRESTJSON/webresources/holidaysandevents/countryCities/\" +\r\n      \"https://cors-anywhere.herokuapp.com/http://54.241.167.36/HolidaysRESTJSON/webresources/holidaysandevents/countryCities/\" +\r\n      this.state.country;\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    if (this._isMounted) {\r\n      this.setState({ cities: data.theList });\r\n    }\r\n  }\r\n\r\n  async getCountryStateCityList() {\r\n    if (this.state.countryState) {\r\n      const url =\r\n        // \"https://cors-anywhere.herokuapp.com/http://www.worldholidaysandevents.com/HolidaysRESTJSON/webresources/holidaysandevents/countryStateCities/\" +\r\n        \"https://cors-anywhere.herokuapp.com/http://54.241.167.36/HolidaysRESTJSON/webresources/holidaysandevents/countryStateCities/\" +\r\n        this.state.country +\r\n        \"/\" +\r\n        this.state.countryState;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (this._isMounted) {\r\n        this.setState({ cities: data.theList });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleChange = event => {\r\n    const isCheckbox = event.target.type === \"checkbox\";\r\n\r\n    this.setState(\r\n      {\r\n        [event.target.name]: isCheckbox\r\n          ? event.target.checked\r\n          : event.target.value\r\n      },\r\n      () => {\r\n        this.getCountryStateList();\r\n      }\r\n    );\r\n  };\r\n\r\n  validate = () => {\r\n    let errorMessage = \"\";\r\n\r\n    if (!document.getElementById(\"country\").value) {\r\n      errorMessage = \"Country should not be empty.\";\r\n    }\r\n    if (errorMessage) {\r\n      this.setState({\r\n        errorMessage\r\n      });\r\n      return false;\r\n    } else return true;\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const isValid = this.validate();\r\n    if (isValid) {\r\n      this.props.handler(\r\n        false,\r\n        this.state.year,\r\n        this.state.country,\r\n        document.getElementById(\"countryState\").value ===\r\n          this.state.countryState\r\n          ? this.state.countryState\r\n          : \"\",\r\n        this.state.city\r\n      );\r\n    }\r\n  };\r\n\r\n  clickEvent = r => {\r\n    document.getElementById(\"country\").value = r.properties.address.country\r\n      ? r.properties.address.country\r\n      : \"\";\r\n    this.setState(\r\n      {\r\n        country: r.properties.address.country\r\n      },\r\n      () => {\r\n        this.getCountryStateList();\r\n        if (r.properties.address.country === \"China\") {\r\n          document.getElementById(\"countryState\").value = r.properties.address\r\n            .city\r\n            ? r.properties.address.city\r\n            : \"\";\r\n        } else {\r\n          document.getElementById(\"countryState\").value = r.properties.address\r\n            .state\r\n            ? r.properties.address.state\r\n            : \"\";\r\n        }\r\n\r\n        this.setState(\r\n          {\r\n            countryState:\r\n              r.properties.address.country === \"China\"\r\n                ? r.properties.address.city\r\n                : r.properties.address.state\r\n          },\r\n          () => {\r\n            this.getCountryStateCityList();\r\n\r\n            if (r.properties.address.city) {\r\n              this.setState(\r\n                {\r\n                  city:\r\n                    r.properties.address.country === \"China\"\r\n                      ? \"\"\r\n                      : r.properties.address.city\r\n                },\r\n                () => {\r\n                  document.getElementById(\"city\").value =\r\n                    r.properties.address.city;\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          <Badge color=\"danger\" pill>\r\n            World Holidays and Events\r\n          </Badge>\r\n        </h2>\r\n\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <Button\r\n              outline\r\n              color=\"info\"\r\n              id=\"toggler\"\r\n              style={{ marginBottom: \"1rem\" }}\r\n            >\r\n              General information. Please read.\r\n            </Button>\r\n            <UncontrolledCollapse toggler=\"#toggler\">\r\n              <Card>\r\n                <CardBody>\r\n                  <p>\r\n                    <b>\r\n                      <font color=\"blue\">Hello! </font>\r\n                    </b>\r\n                    This website is a work in progress. You are welcome to use\r\n                    it free of charge until we consider it ready for commercial\r\n                    consumption. In the meantime, please do not be dismayed or\r\n                    surprised if it occasionally becomes inaccessible, crashes,\r\n                    or otherwise misbehaves. Comments and suggestions are\r\n                    appreciated at\r\n                    <font color=\"green\">\r\n                      {\" \"}\r\n                      info@worldholidaysandevents.com.\r\n                    </font>{\" \"}\r\n                    The functionality of this website is available as a web\r\n                    service.\r\n                  </p>\r\n                  <p>\r\n                    Select a <font color=\"purple\">locale </font> and a\r\n                    <font color=\"purple\"> time period</font> and obtain a list\r\n                    of holidays that will occur in that locale during that\r\n                    period.\r\n                  </p>\r\n                </CardBody>\r\n              </Card>\r\n            </UncontrolledCollapse>\r\n          </div>\r\n\r\n          <Alert color=\"primary\">\r\n            How to get the holidays and events for a particular city ? 1. Select\r\n            the drop-down list. 2. Click any place on map.\r\n          </Alert>\r\n          <FormGroup>\r\n            <center>\r\n              <Col xs={10} sm={2} md={2} lg={1}>\r\n                <Label for=\"Year\">Year</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"year\"\r\n                  value={this.state.year}\r\n                  onChange={this.handleChange}\r\n                  placeholder=\"Year\"\r\n                />\r\n              </Col>\r\n            </center>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <center>\r\n              <Row>\r\n                <Col\r\n                  sm={5}\r\n                  md={{ span: 3, offset: 1 }}\r\n                  lg={{ span: 3, offset: 3 }}\r\n                  xl={2}\r\n                >\r\n                  <Label for=\"Country\">Country</Label>\r\n                  <Input\r\n                    id=\"country\"\r\n                    type=\"select\"\r\n                    name=\"country\"\r\n                    value={this.state.country}\r\n                    onChange={this.handleChange}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {this.state.countries.map(countries => (\r\n                      <option key={countries} value={countries}>\r\n                        {countries}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                  <div style={{ fontSize: 12, color: \"red\" }}>\r\n                    {this.state.errorMessage}\r\n                  </div>\r\n                </Col>\r\n                <Col sm={3} md={3} lg={3} xl={2}>\r\n                  <Label for=\"State/Province\">State/Province</Label>\r\n                  <Input\r\n                    id=\"countryState\"\r\n                    type=\"select\"\r\n                    name=\"countryState\"\r\n                    value={this.state.countryState}\r\n                    onChange={this.handleChange}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {this.state.countryStates.map(countryStates => (\r\n                      <option key={countryStates} value={countryStates}>\r\n                        {countryStates}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </Col>\r\n                <Col sm={3} md={3} lg={2} xl={2}>\r\n                  <Label for=\"City\">City</Label>\r\n                  <Input\r\n                    id=\"city\"\r\n                    type=\"select\"\r\n                    name=\"city\"\r\n                    value={this.state.city}\r\n                    onChange={this.handleChange}\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {this.state.cities.map(cities => (\r\n                      <option key={cities} value={cities}>\r\n                        {cities}\r\n                      </option>\r\n                    ))}\r\n                  </Input>\r\n                </Col>\r\n              </Row>\r\n            </center>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Button color=\"secondary\" type=\"submit\">\r\n              Get Holiday List!\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n\r\n        <MapCom mapFun={this.clickEvent} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nlet dialogStyles = {\r\n  width: \"500px\",\r\n  maxWidth: \"100%\",\r\n  margin: \"0 auto\",\r\n  position: \"fixed\",\r\n  left: \"50%\",\r\n  top: \"50%\",\r\n  transform: \"translate(-50%,-50%)\",\r\n  zIndex: \"999\",\r\n  backgroundColor: \"#eee\",\r\n  padding: \"10px 20px 40px\",\r\n  borderRadius: \"8px\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\"\r\n};\r\n\r\nlet dialogCloseButtonStyles = {\r\n  marginBottom: \"15px\",\r\n  padding: \"3px 8px\",\r\n  cursor: \"pointer\",\r\n  borderRadius: \"50%\",\r\n  border: \"none\",\r\n  width: \"30px\",\r\n  height: \"30px\",\r\n  fontWeight: \"bold\",\r\n  alignSelf: \"flex-end\"\r\n};\r\n\r\nexport default class Notes extends React.Component {\r\n  render() {\r\n    let notes = (\r\n      <div style={dialogStyles}>\r\n        <button style={dialogCloseButtonStyles} onClick={this.props.onClose}>\r\n          x\r\n        </button>\r\n        <div align=\"left\">{this.props.children}</div>\r\n      </div>\r\n    );\r\n\r\n    if (!this.props.isOpen) {\r\n      notes = null;\r\n    }\r\n    return <div>{notes}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Notes from \"./Notes\";\r\nimport { Table, Button, FormGroup } from \"reactstrap\";\r\n\r\nexport default class Information extends React.Component {\r\n  _isMounted = false;\r\n\r\n  state = {\r\n    listOfData: [],\r\n    isOpen: false,\r\n    businessesClosed: null,\r\n    banksClosed: null,\r\n    religiousHoliday: null,\r\n    religion: null,\r\n    dis: null,\r\n    holidayNote: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n\r\n    const url =\r\n      // \"https://cors-anywhere.herokuapp.com/http://www.worldholidaysandevents.com/HolidaysRESTJSON/webresources/holidaysandevents/holidaysAndEvents/\" +\r\n      \"https://cors-anywhere.herokuapp.com/http://54.241.167.36/HolidaysRESTJSON/webresources/holidaysandevents/holidaysAndEvents/\" +\r\n      this.props.country +\r\n      (this.props.countryState === \"\"\r\n        ? \"/none\"\r\n        : \"/\" + this.props.countryState) +\r\n      (this.props.city === \"\" ? \"/none/\" : \"/\" + this.props.city + \"/\") +\r\n      this.props.year +\r\n      \"/1/1/\" +\r\n      this.props.year +\r\n      \"/12/31\";\r\n\r\n    const response = await fetch(url);\r\n\r\n    const data = await response.json();\r\n\r\n    if (this._isMounted) {\r\n      this.setState({ listOfData: data.theList });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    this.props.handler(true);\r\n  };\r\n\r\n  handleClickNotes = item => {\r\n    this.setState({\r\n      isOpen: true,\r\n      businessesClosed: item.businessesClosed,\r\n      banksClosed: item.banksClosed,\r\n      religiousHoliday: item.religiousHoliday,\r\n      religion: item.religion,\r\n      dis: item.dis,\r\n      holidayNote: item.holidayNote\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <style>\r\n          {\r\n            \"Table, th, td{ border: 3px groove;  margin-left: auto;margin-right: auto; padding: 5px;}\"\r\n          }\r\n        </style>\r\n        <h2>Holiday and Event List</h2>\r\n        <h4>\r\n          {this.props.country}\r\n          {this.props.countryState === \"\"\r\n            ? \" \"\r\n            : \", \" + this.props.countryState}\r\n          {this.props.city === \"\" ? \" \" : \", \" + this.props.city}\r\n        </h4>\r\n\r\n        <center>\r\n          <Table responsive striped>\r\n            <tbody>\r\n              <tr>\r\n                <th>\r\n                  <font color=\"blue\">Start Date</font>\r\n                </th>\r\n                <th>\r\n                  <font color=\"blue\">End Date</font>\r\n                </th>\r\n                <th>\r\n                  <font color=\"blue\">Name</font>\r\n                </th>\r\n                <th>\r\n                  <font color=\"blue\">Info</font>\r\n                </th>\r\n              </tr>\r\n              {this.state.listOfData.map((holiday, i) => (\r\n                <tr key={`holiday-${i}`}>\r\n                  <td value={holiday.startDate}>{holiday.startDate}</td>\r\n                  <td\r\n                    value={\r\n                      holiday.endDate === undefined ? \" \" : holiday.endDate\r\n                    }\r\n                  >\r\n                    {holiday.endDate === undefined ? \" \" : holiday.endDate}\r\n                  </td>\r\n                  <td value={holiday.name}>{holiday.name}</td>\r\n                  <td>\r\n                    <button\r\n                      value={i}\r\n                      onClick={this.handleClickNotes.bind(this, holiday)}\r\n                    >\r\n                      Notes\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <FormGroup>\r\n            <div>\r\n              <Button\r\n                color=\"secondary\"\r\n                onClick={this.handleSubmit}\r\n                type=\"submit\"\r\n              >\r\n                Back to previous page\r\n              </Button>\r\n            </div>\r\n          </FormGroup>\r\n        </center>\r\n        <Notes\r\n          isOpen={this.state.isOpen}\r\n          onClose={e => {\r\n            this.setState({ isOpen: false });\r\n          }}\r\n        >\r\n          <div>\r\n            Businesses Closed:\r\n            <font color=\"blue\"> {this.state.businessesClosed}</font>\r\n          </div>\r\n          <div>\r\n            Banks Closed:<font color=\"blue\"> {this.state.banksClosed}</font>\r\n          </div>\r\n          <div>\r\n            Religious Holiday:\r\n            <font color=\"blue\"> {this.state.religiousHoliday}</font>\r\n          </div>\r\n          <div>\r\n            Religion:<font color=\"blue\"> {this.state.religion}</font>\r\n          </div>\r\n          <div>\r\n            Disrespectful to Hold an Event:\r\n            <font color=\"blue\"> {this.state.dis}</font>\r\n          </div>\r\n          <div>\r\n            Holiday Note:<font color=\"blue\"> {this.state.holidayNote}</font>\r\n          </div>\r\n        </Notes>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport logo from \"./fsulogo.png\";\nimport Main from \"./components/Main\";\nimport Information from \"./components/Information\";\n\n/**\n * App\n * a program starts its execution\n */\nclass App extends React.Component {\n  /**\n   * main prop\n   * visible, year, country, countryState, city\n   * visible: showing main page or information page\n   */\n  state = {\n    visible: true,\n    year: \"\",\n    country: \"\",\n    countryState: \"\",\n    city: \"\"\n  };\n\n  // setting\n  handler = (val, valYear, valCountry, valCountryState, valCity) => {\n    this.setState({\n      visible: val,\n      year: valYear,\n      country: valCountry,\n      countryState: valCountryState,\n      city: valCity\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\" style={{ height: \"100vh\", width: \"100%\" }}>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n\n        {this.state.visible ? (\n          // main page\n          <div>\n            <Main handler={this.handler} />\n          </div>\n        ) : (\n          // detail\n          <Information\n            handler={this.handler}\n            year={this.state.year}\n            country={this.state.country}\n            countryState={this.state.countryState}\n            city={this.state.city}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet-control-geocoder/dist/Control.Geocoder.js\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// document.addEventListener(\"mousewheel\", this.mousewheel.bind(this), { passive: false });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}